# vim:fileencoding=utf-8:ft=conf

# Fonts {{{

font_family      OperatorMonoSSmLig Nerd Font Book
bold_font        Operator Mono SSm Medium
italic_font      OperatorMonoSSmLig Nerd Font Book Italic
bold_italic_font Operator Mono SSm Medium Italic

font_size        13.0
font_size_delta  1

adjust_line_height 0
adjust_column_width -1

# symbol_map codepoints Font Family Name
# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols

# box_drawing_scale 0.001, 1, 1.5, 2

# }}}


# Cursor customization {{{

cursor                   #ffffdf
cursor_text_color        background
cursor_shape             block
cursor_blink_interval    0
macos_custom_beam_cursor no

# }}}


# Scrollback {{{

# scrollback_lines 2000
# scrollback_pager less +G -R

# wheel_scroll_multiplier 5.0

# }}}


# Mouse {{{

# url_color #0087BD
# url_style curly

# open_url_with default
# open_url_modifiers ctrl+shift

# copy_on_select no
# rectangle_select_modifiers ctrl+alt

# select_by_word_characters :@-./_~?&=%+#
# click_interval 0.5
# mouse_hide_wait 3.0

# focus_follows_mouse no

# }}}


# Performance tuning {{{

# repaint_delay    10
# input_delay 3
# sync_to_monitor yes

# }}}


# Audio/visual bell {{{
visual_bell_duration 0.0
enable_audio_bell no
# }}}


# Window layout {{{

# initial_window_width   640
# initial_window_height  400

# enabled_layouts *

# window_border_width 1
# window_margin_width 0
# window_padding_width 0

# active_border_color #00ff00
# inactive_border_color #cccccc

# inactive_text_alpha 1.0

# }}}


# Tab bar {{{

# tab_bar_edge bottom
# tab_separator " â”‡"

# active_tab_foreground #000
# active_tab_background #eee
# active_tab_font_style bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
# inactive_tab_font_style normal

# }}}


# Color scheme {{{

# ANSI 256 seoul256 reference

# 22 #006F00
# 23 #007173
# 24 #007299
# 25 #0074BE
# 30 #009799
# 32 #0099BD
# 38 #00BDDF
# 52 #730B00
# 58 #727100
# 59 #727272
# 65 #719872
# 66 #719899
# 67 #7299BC
# 68 #719CDF
# 73 #6FBCBD
# 74 #70BDDF
# 88 #9B1300
# 89 #9B1D72
# 94 #9A7200
# 95 #9A7372
# 96 #9A7599
# 101 #999872
# 103 #999ABD
# 108 #98BC99
# 109 #98BCBD
# 110 #98BEDE
# 116 #97DDDF
# 125 #BF2172
# 131 #BE7572
# 137 #BE9873
# 143 #BDBB72
# 144 #BDBC98
# 145 #BDBDBD
# 151 #BCDDBD
# 152 #BCDEDE
# 153 #BCE0FF
# 161 #E12672
# 168 #E17899
# 173 #E19972
# 174 #E09B99
# 179 #DFBC72
# 181 #E0BEBC
# 184 #DEDC00
# 186 #DEDD99
# 187 #DFDEBD
# 189 #DFDFFF
# 216 #FFBD98
# 217 #FFBFBD
# 218 #FFC0DE
# 220 #FFDD00
# 222 #FFDE99
# 224 #FFDFDF
# 230 #FFFFDF
# 231 #FFFFFF
# 232 #060606
# 233 #171717
# 234 #252525
# 235 #333233
# 236 #3F3F3F
# 237 #4B4B4B
# 238 #565656
# 239 #616161
# 240 #6B6B6B
# 241 #757575
# 249 #BFBFBF
# 250 #C8C8C8
# 251 #D1D0D1
# 252 #D9D9D9
# 253 #E1E1E1
# 254 #E9E9E9
# 255 #F1F1F1

background_opacity 0.9

foreground #d0d0d0
background #3a3a3a

selection_foreground #ffd700
selection_background #444444

# Black
color0  #4e4e4e
color8  #626262

# Red
color1  #d68787
color9  #d75f87

# Grean
color2  #5f865f
color10 #87af87

# Yellow
color3  #d8af5f
color11 #ffd787

# Blue
color4  #85add4
color12 #add4fb

# Magenta
color5  #d7afaf
color13 #ffafaf

# Cyan
color6  #87afaf
color14 #87d7d7

# White
color7  #d0d0d0
color15 #e4e4e4

# }}}


# Advanced {{{

close_on_child_death no
allow_remote_control yes

term xterm-kitty

# }}}


# Keyboard shortcuts {{{
#
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html

# Clipboard {{{
# map ctrl+shift+v        paste_from_clipboard
# map ctrl+shift+s        paste_from_selection
# map ctrl+shift+c        copy_to_clipboard
# map shift+insert        paste_from_selection
# You can also pass the contents of the current selection to any program using
# pass_selection_to_program. By default, the system's open program is used, but
# you can specify your own, for example:
# map ctrl+shift+o      pass_selection_to_program firefox
# map ctrl+shift+o        pass_selection_to_program
# }}}

# Scrolling {{{
# map ctrl+shift+up        scroll_line_up
# map ctrl+shift+down      scroll_line_down
# map ctrl+shift+k         scroll_line_up
# map ctrl+shift+j         scroll_line_down
# map ctrl+shift+page_up   scroll_page_up
# map ctrl+shift+page_down scroll_page_down
# map ctrl+shift+home      scroll_home
# map ctrl+shift+end       scroll_end
# map ctrl+shift+h         show_scrollback
# }}}

# Window management {{{
# map ctrl+shift+enter    new_window
# map ctrl+shift+n        new_os_window
# map ctrl+shift+w        close_window
# map ctrl+shift+]        next_window
# map ctrl+shift+[        previous_window
# map ctrl+shift+f        move_window_forward
# map ctrl+shift+b        move_window_backward
# map ctrl+shift+`        move_window_to_top
# map ctrl+shift+1        first_window
# map ctrl+shift+2        second_window
# map ctrl+shift+3        third_window
# map ctrl+shift+4        fourth_window
# map ctrl+shift+5        fifth_window
# map ctrl+shift+6        sixth_window
# map ctrl+shift+7        seventh_window
# map ctrl+shift+8        eighth_window
# map ctrl+shift+9        ninth_window
# map ctrl+shift+0        tenth_window
# You can open a new window running an arbitrary program, for example:
# map ctrl+shift+y      new_window mutt
#
# You can pass the current selection to the new program by using the @selection placeholder
# map ctrl+shift+y      new_window less @selection
#
# You can even send the contents of the current screen + history buffer as stdin using
# the placeholders @text (which is the plain text) and @ansi (which includes text styling escape codes).
# For only the current screen, use @screen or @ansi_screen.
# For example, the following command opens the scrollback buffer in less in a new window.
# map ctrl+shift+y      new_window @ansi less +G -R
#
# You can open a new window with the current working directory set to the
# working directory of the current window using
# map ctrl+alt+enter    new_window_with_cwd
# }}}

# Tab management {{{
# map ctrl+shift+right    next_tab
# map ctrl+shift+left     previous_tab
# map ctrl+shift+t        new_tab
# map ctrl+shift+q        close_tab
# map ctrl+shift+l        next_layout
# map ctrl+shift+.        move_tab_forward
# map ctrl+shift+,        move_tab_backward
# map ctrl+shift+alt+t    set_tab_title
# You can also create shortcuts to go to specific tabs, with 1 being the first tab
# map ctrl+alt+1          goto_tab 1
# map ctrl+alt+2          goto_tab 2

# Just as with new_window above, you can also pass the name of arbitrary
# commands to run when using new_tab and use new_tab_with_cwd.
# }}}

# Layout management {{{
# You can create shortcuts to switch to specific layouts
# map ctrl+alt+1          goto_layout tall
# map ctrl+alt+2          goto_layout stack
# }}}

# Font sizes {{{

map ctrl+alt+equal     increase_font_size
map ctrl+alt+minus     decrease_font_size
map ctrl+alt+backspace restore_font_size

map ctrl+alt+8     set_font_size 11
map ctrl+alt+9     set_font_size 17


# Miscellaneous {{{
# map ctrl+shift+f11      toggle_fullscreen
# map ctrl+shift+u        input_unicode_character
# map ctrl+shift+f2       edit_config_file
# Open a currently visible URL using the keyboard. The program used to open the URL is specified in open_url_with.
# You can customize how the URLs are detected and opened by specifying command line options to
# url_hints. For example:
# map ctrl+shift+e        run_simple_kitten text url_hints --program firefox --regex "http://[^ ]+"
# map ctrl+shift+e        run_simple_kitten text url_hints

# Sending arbitrary text on shortcut key presses
# You can tell kitty to send arbitrary (UTF-8) encoded text to
# the client program when pressing specified shortcut keys. For example:
# map ctrl+alt+a send_text all Special text
# This will send "Special text" when you press the Ctrl+Alt+a key combination.
# The text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as UTF-8 text). The first argument
# to send_text is the keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated combination of them.
# The special keyword all means all modes. The modes normal and application refer to
# the DECCKM cursor key mode for terminals, and kitty refers to the special kitty
# extended keyboard protocol. Another example, that outputs a word and then moves the cursor
# to the start of the line (same as pressing the Home key):
# map ctrl+alt+a send_text normal Word\x1b[H
# map ctrl+alt+a send_text application Word\x1bOH
# }}}

# }}}


# macOS {{{

macos_titlebar_color system
macos_hide_titlebar  no
macos_option_as_alt  yes

# }}}
