# key names: http://www.glfw.org/docs/latest/group__keys.html
# modifier names: http://www.glfw.org/docs/latest/group__mods.html

# Clipboard {{{

# map ctrl+shift+v paste_from_clipboard
# map p paste_from_selection
# map y copy_to_clipboard

# map o pass_selection_to_program firefox

# }}}

# Scrolling {{{

# <-- Native Kitty scrolling

# map ctrl+shift+k scroll_line_up
# map ctrl+shift+j scroll_line_down

# map ctrl+shift+u scroll_page_up
# map ctrl+shift+d scroll_page_down

map ctrl+s>g       scroll_home
map ctrl+s>shift+g scroll_end
# --> Native Kitty scrolling

# <-- Smart Kitty scrolling
map ctrl+shift+k    kitten kittens/smart-scroll/smart_scroll.py scroll_line_up   ctrl+shift+k
map ctrl+shift+j    kitten kittens/smart-scroll/smart_scroll.py scroll_line_down ctrl+shift+j

map ctrl+shift+u          kitten kittens/smart-scroll/smart_scroll.py scroll_page_up   ctrl+u
map ctrl+shift+d          kitten kittens/smart-scroll/smart_scroll.py scroll_page_down ctrl+d
# --> Smart Kitty scrolling

# map ctrl+s>[     show_scrollback # Native scrollback
map ctrl+s>[ kitten kittens/grab/grab.py # Grab scrollback
map ctrl+s>] launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay nvim -u ~/.config/nvim/init-kitty.vim -R +AnsiEsc # Neovim

# Clear screen
# map super+l combine : clear_terminal scroll active : send_text normal,application \x0c
map ctrl+l combine : clear_terminal scroll active : send_text normal,application \x0c
map ctrl+s>shift+s clear_terminal scrollback active

# }}}

# Window Management {{{

 # map ctrl+s>-       combine : launch --cwd=current : goto_layout vertical
 # map ctrl+s>\       combine : launch --cwd=current : goto_layout horizontal

 map ctrl+s>shift+c new_os_window
 map ctrl+s>x       close_window

 map ctrl+s>alt+k     next_window
 map ctrl+s>alt+j     previous_window
 # map ctrl+s>l     next_window
 # map ctrl+s>h     previous_window

 map ctrl+s>-     launch --location=hsplit --cwd=current
 map ctrl+s>\     launch --location=vsplit --cwd=current

 map ctrl+s>space layout_action rotate

 map ctrl+s>shift+h move_window left
 map ctrl+s>shift+l move_window right
 map ctrl+s>shift+k move_window up
 map ctrl+s>shift+j move_window down

 map ctrl+s>h neighboring_window left
 map ctrl+s>l neighboring_window right
 map ctrl+s>k neighboring_window up
 map ctrl+s>j neighboring_window down

 # map ctrl+s>}     move_window_forward
 # map ctrl+s>{     move_window_backward
 map ctrl+shift+` move_window_to_top

 map ctrl+shift+1        first_window
 map ctrl+shift+2        second_window
 map ctrl+shift+3        third_window
 map ctrl+shift+4        fourth_window
 map ctrl+shift+5        fifth_window
 map ctrl+shift+6        sixth_window
 map ctrl+shift+7        seventh_window
 map ctrl+shift+8        eighth_window
 map ctrl+shift+9        ninth_window
 map ctrl+shift+0        tenth_window

 # you can open a new window running an arbitrary program, for example:
 # map ctrl+shift+y      new_window mutt

 # you can pass the current selection to the new program by using the
 # @selection placeholder
 map ctrl+shift+y      new_window less @selection

 # you can even send the contents of the current screen + history buffer as
 # stdin using the placeholders @text (which is the plain text) and @ansi
 # (which includes text styling escape codes).  for only the current screen,
 # use @screen or @ansi_screen.  for example, the following command opens the
 # scrollback buffer in less in a new window.
 map ctrl+shift+y      new_window @ansi less +g -r

 # you can open a new window with the current working directory set to the
 # working directory of the current window using
 map ctrl+alt+enter    new_window_with_cwd

# }}}

# Tab Management {{{

map ctrl+s>n       next_tab
map ctrl+s>p       previous_tab
map ctrl+s>c       new_tab
map ctrl+s>&       close_tab
# map ctrl+s>space   next_layout
map ctrl+s>shift+, move_tab_forward
map ctrl+s>shift+. move_tab_backward
map ctrl+s>,       set_tab_title

# you can also create shortcuts to go to specific tabs, with 1 being the
# first tab
map ctrl+s>1          goto_tab 1
map ctrl+s>2          goto_tab 2
map ctrl+s>3          goto_tab 3
map ctrl+s>4          goto_tab 4
map ctrl+s>5          goto_tab 5
map ctrl+s>6          goto_tab 6
map ctrl+s>7          goto_tab 7
map ctrl+s>8          goto_tab 8
map ctrl+s>9          goto_tab 9

# }}}

# Layout Management {{{
# you can create shortcuts to switch to specific layouts

map ctrl+s>shift+\ goto_layout vertical
map ctrl+s>shift+- goto_layout horizontal

map ctrl+s>shift+r start_resizing_window

map ctrl+s>z       kitten zoom_toggle.py

# }}}

# Font Sizes {{{

map ctrl+s>shift+=   change_font_size all +1.0
map ctrl+s>_         change_font_size all -1.0
map ctrl+s>backspace change_font_size all 0

# }}}


# Miscellaneous {{{

map ctrl+s>shift+r load_config_file

map ctrl+s>shift+u input_unicode_character

map ctrl+shift+e        run_simple_kitten text url_hints --program open --regex "http://[^ ]+"
map ctrl+shift+y        run_simple_kitten text url_hints --program @ --regex "http://[^ ]+"

# Files
map ctrl+shift+p>alt+f   kitten hints --program open --type=path
map ctrl+shift+p>shift+f kitten hints --program @    --type=path

# URLs
map ctrl+shift+p>u       kitten hints --program -    --type=url
map ctrl+shift+p>alt+u   kitten hints --program open --type=url
map ctrl+shift+p>shift+u kitten hints --program @    --type=url

# sending arbitrary text on shortcut key presses
# you can tell kitty to send arbitrary (utf-8) encoded text to
# the client program when pressing specified shortcut keys.
map ctrl+alt+a send_text all special text

# }}}
# key names: http://www.glfw.org/docs/latest/group__keys.html
