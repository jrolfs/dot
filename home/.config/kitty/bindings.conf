# vim:fileencoding=utf-8:ft=conf

# key names: http://www.glfw.org/docs/latest/group__keys.html
# modifier names: http://www.glfw.org/docs/latest/group__mods.html

# Clipboard {{{

# map ctrl+shift+v paste_from_clipboard
# map p paste_from_selection
# map y copy_to_clipboard

# map o pass_selection_to_program firefox

# }}}

# Scrolling {{{

map ctrl+s>[     show_scrollback

map ctrl+shift+k scroll_line_up
map ctrl+shift+j scroll_line_down

map ctrl+shift+u scroll_page_up
map ctrl+shift+d scroll_page_down

map ctrl+shift+g scroll_home
map ctrl+shift+G scroll_end

# }}}

# Window Management {{{

 map ctrl+s>-       combine : new_window : goto_layout vertical
 map ctrl+s>\       combine : new_window : goto_layout horizontal

 map ctrl+s>shift+c new_os_window
 map ctrl+s>x       close_window

 map ctrl+s>k     next_window
 map ctrl+s>j     previous_window
 map ctrl+s>l     next_window
 map ctrl+s>h     previous_window

 map ctrl+s>}     move_window_forward
 map ctrl+s>{     move_window_backward
 map ctrl+shift+` move_window_to_top

 map ctrl+shift+1        first_window
 map ctrl+shift+2        second_window
 map ctrl+shift+3        third_window
 map ctrl+shift+4        fourth_window
 map ctrl+shift+5        fifth_window
 map ctrl+shift+6        sixth_window
 map ctrl+shift+7        seventh_window
 map ctrl+shift+8        eighth_window
 map ctrl+shift+9        ninth_window
 map ctrl+shift+0        tenth_window

 # you can open a new window running an arbitrary program, for example:
 # map ctrl+shift+y      new_window mutt

 # you can pass the current selection to the new program by using the
 # @selection placeholder
 map ctrl+shift+y      new_window less @selection

 # you can even send the contents of the current screen + history buffer as
 # stdin using the placeholders @text (which is the plain text) and @ansi
 # (which includes text styling escape codes).  for only the current screen,
 # use @screen or @ansi_screen.  for example, the following command opens the
 # scrollback buffer in less in a new window.
 map ctrl+shift+y      new_window @ansi less +g -r

 # you can open a new window with the current working directory set to the
 # working directory of the current window using
 map ctrl+alt+enter    new_window_with_cwd

# }}}

# Tab Management {{{

map ctrl+s>n       next_tab
map ctrl+s>p       previous_tab
map ctrl+s>c       new_tab
map ctrl+s>&       close_tab
map ctrl+s>space   next_layout
map ctrl+s>shift+, move_tab_forward
map ctrl+s>shift+. move_tab_backward
map ctrl+s>,       set_tab_title

# you can also create shortcuts to go to specific tabs, with 1 being the
# first tab
map ctrl+s>1          goto_tab 1
map ctrl+s>2          goto_tab 2
map ctrl+s>3          goto_tab 3
map ctrl+s>4          goto_tab 4
map ctrl+s>5          goto_tab 5
map ctrl+s>6          goto_tab 6
map ctrl+s>7          goto_tab 7
map ctrl+s>8          goto_tab 8
map ctrl+s>9          goto_tab 9

# }}}

# Layout Management {{{
# you can create shortcuts to switch to specific layouts
map ctrl+s>|          goto_layout tall
map ctrl+s>_          goto_layout stack

# }}}

# Font Sizes {{{

map ctrl+s>)         increase_font_size
map ctrl+s>(         decrease_font_size
map ctrl+s>backspace restore_font_size

map ctrl+s>8         set_font_size 11
map ctrl+s>9         set_font_size 17

# }}}


# Miscellaneous {{{

map ctrl+shift+f11      toggle_fullscreen
map ctrl+shift+u        input_unicode_character
map ctrl+shift+f2       edit_config_file

# open a currently visible url using the keyboard. the program used to open the
# url is specified in open_url_with.  you can customize how the urls are
# detected and opened by specifying command line options to url_hints.
map ctrl+shift+e        run_simple_kitten text url_hints --program firefox --regex "http://[^ ]+"
map ctrl+shift+e        run_simple_kitten text url_hints

# sending arbitrary text on shortcut key presses
# you can tell kitty to send arbitrary (utf-8) encoded text to
# the client program when pressing specified shortcut keys.
map ctrl+alt+a send_text all special text

# this will send "special text" when you press the ctrl+alt+a key combination.
# the text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as utf-8 text). the first argument
# to send_text is the keyboard modes in which to activate the shortcut. the
# possible values are normal or application or kitty or a comma separated
# combination of them.  the special keyword all means all modes. the modes
# normal and application refer to the decckm cursor key mode for terminals, and
# kitty refers to the special kitty extended keyboard protocol. another
# example, that outputs a word and then moves the cursor to the start of the
# line (same as pressing the home key):
map ctrl+alt+a send_text normal word\x1b[h
map ctrl+alt+a send_text application word\x1boh

# }}}
